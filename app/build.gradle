plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'ai.bryj.mobile.training.gradleapp'
    compileSdk 32

    defaultConfig {
        applicationId "ai.bryj.mobile.training.gradleapp"
        minSdk 23
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

//region Gradle Experiments
/*
//2. Uncomment, sync and run emptyTask. Observe copy happening
copy {
    group "experiments"
    from "../images/gradle10.webp"
    into "new_folder"
    println("Printed on configuration (copy)")
}

task emptyTask() {
    group "experiments"
    println("Printed on configuration (emptyTask)")
}
*/

/*
//3. Uncomment, sync and run copyImage. Check the list of tasks. Check when the message is printed
task copyImage(type: Copy) {
    group "experiments"
    from "../images/gradle20.jpeg"
    into "new_folder"
    println("Printed on configuration (copyImage)")
}

task emptyTask() {
    group "experiments"
    println("Printed on configuration (emptyTask)")
}*/

/*
//4. Uncomment and check what prints when
task copyImage() {
    group "experiments"
    println("Printed on configuration")
    doFirst {
        copy {
            group "experiments"
            from "../images/gradle21.jpeg"
            into "folderFirst"
            println("Printed on execution - first")
        }
    }
    doLast {
        copy {
            group "experiments"
            from "../images/gradle21.jpeg"
            into "folderLast"
            println("Printed on execution - last")
        }
    }
}*/

/*
//5. Uncomment and check task dependency
task copyToFolder1(type: Copy) {
    group "experiments"
    from "../images/gradle22.jpeg"
    into "folder1"
}

task copyToFolder2(type: Copy) {
    group "experiments"
    from "../images/gradle22.jpeg"
    into "folder2"
}

task copyImage() {
    group "experiments"
    println("Printed on configuration")
    dependsOn(
            copyToFolder1,
            { println("Printed on configuration - dependsOn") }
    )
    finalizedBy(
            copyToFolder2,
            {
                println("Printed on configuration - finalized")
            },
            {
                println("Printed on configuration - finalized 2")
            })
}*/

/*
//6. Uncomment and try two different ways of setting a new folder. Check where the resulting folder is placed with each.
def folderTo = "original_folder"

//task chooseFolder() {
//    group "experiments"
//    folderTo = "different_folder"
//}

//task chooseFolder() {
//    group "experiments"
//    doLast {
//        folderTo = "different_folder"
//    }
//}

task runCopy(type: Copy) {
    dependsOn(chooseFolder)
    group "experiments"
    from "../images/gradle30.jpeg"
    into "${folderTo}"
}*/

/*
//7. Uncomment and check there's no task for copying without setting a name first
def copyTo(folderTo) {
    copy {
        group "experiments"
        from "../images/gradle40.jpeg"
        into "${folderTo}"
    }
}

task copyToFolderABC() {
    group "experiments"
    doLast {
        copyTo("ABC")
    }
}

task copyToFolderXYZ() {
    group "experiments"
    doLast {
        copyTo("XYZ")
    }
}*/

//endregion